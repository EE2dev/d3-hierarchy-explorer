{
  "name": "Plot",
  "children": [
    {
      "name": ".barX()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "If neither the x1 nor x2 option are specified, the x option may be specified as shorthand to apply an implicit stackX transform. This is the typical configuration for a horizontal bar chart with bars aligned at x = 0. If the x option is not specified, it defaults to the identity function"
            },
            {
              "name": "x1",
              "type": "channel",
              "info": "The starting horizontal position bound to the x scale"
            },
            {
              "name": "x2",
              "type": "channel",
              "info": "The ending horizontal position; bound to the x scale"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale, which must be band. If the y channel is not specified, the bar will span the full vertical extent of the plot (or facet)"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to color if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Shorthand: inset"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "rx",
              "type": "constant number",
              "info": "The x-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "ry",
              "type": "constant number",
              "info": "The y-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            }
          ]
        }
      ]
    },
    {
      "name": ".barY()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "If neither the y1 nor y2 option are specified, the x option may be specified as shorthand to apply an implicit stackY transform. This is the typical configuration for a horizontal bar chart with bars aligned at y = 0. If the y option is not specified, it defaults to the identity function"
            },
            {
              "name": "y1",
              "type": "channel",
              "info": "The starting vertical position bound to the y scale"
            },
            {
              "name": "y2",
              "type": "channel",
              "info": "The ending vertical position bound to the y scale"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale, which must be band. If the x channel is not specified, the bar will span the full horizontal extent of the plot (or facet)"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to color if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Shorthand: inset"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "rx",
              "type": "constant number",
              "info": "The x-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "ry",
              "type": "constant number",
              "info": "The y-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            }
          ]
        }
      ]
    },
    {
      "name": ".plot()",
      "type": "options",
      "children": []
    }
  ]
}